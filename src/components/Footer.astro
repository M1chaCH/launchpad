---
import {initTranslations} from "../i18n/utils";

const t = initTranslations(Astro.url);
---

<footer>
  <a href="https://michu-tech.com">
    <img src="/michu-tech-logo.svg" alt="logo"/>
  </a>
  <form>
    <h4 class="larger-text">{t("footer.contact")}</h4>
    <input id="contact-mail" type="email" placeholder={t("footer.email")}/>
    <textarea id="contact-message" type="email" placeholder={t("footer.message")}/>
    <div class="controls">
      <span id="contact-char-count">0 / (50 - 1500)</span>
      <button type="submit" disabled>
        <span id="contact-form-text">{t("footer.send")}</span>
        <span id="contact-form-loading" class="material-symbols-rounded">sync</span>
        <span id="contact-form-failed" class="material-symbols-rounded">error</span>
        <span id="contact-form-sent" class="material-symbols-rounded">send</span>
      </button>
    </div>
  </form>
  <div class="languages">
    <a href="/de/">DE</a>
    <a href="/en/">EN</a>
  </div>
</footer>

<style>
  footer {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-auto-rows: fit-content(100%);
    gap: 1rem;
    padding: var(--general-padding);
    margin: 0 5vw;
    box-sizing: border-box;
    min-height: 100vh;
    align-content: space-evenly;
  }

  footer img {
    width: 100%;
    height: auto;
    max-width: 500px;
  }

  .languages {
    display: flex;
    flex-flow: row nowrap;
    gap: 1rem;
    align-items: center;
  }

  .languages a {
    background-color: #413F3C;
    border-radius: 1rem;
    padding: 1.2rem;
    font-size: 2rem;
    color: white;
    font-weight: bold;
  }

  form {
    grid-row: span 2;
    display: flex;
    justify-content: flex-end;
    flex-flow: column;
    gap: 1rem;
    box-sizing: border-box;
    margin: 1rem;
  }

  form input, form textarea {
    padding: 1rem;
    border: 1px solid black;
    border-radius: 5px;
    font-family: monospace;
    font-size: 1.2rem;
    box-sizing: border-box;

    outline: 2px solid black;
  }

  form textarea {
    min-width: 200px;
    min-height: 80px;
  }

  form .controls {
    display: flex;
    flex-flow: row nowrap;
    gap: 2rem;
    justify-content: space-between;
  }

  form button {
    all: unset;
    cursor: pointer;
    position: relative;

    font-size: 1.2rem;
    background-color: white;

    width: fit-content;
    padding: 0.5rem 1rem;
    box-sizing: border-box;
    border-radius: 5px;

    outline: 2px solid black;
  }

  form button:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  #contact-form-loading, #contact-form-failed, #contact-form-sent {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.8rem;

    opacity: 0;
  }

  #contact-form-failed, #contact-form-sent {
    scale: 0.8;
  }
</style>

<script>
  import {gsap} from "gsap";
  import {createFadeIn} from "../scripts/global";
  import Animation = gsap.core.Animation;
  import {load} from "cheerio";

  createFadeIn("footer");

  const countSpan = document.getElementById("contact-char-count");
  const sendButton = document.querySelector("form button");
  const emailInput = document.getElementById("contact-mail") as HTMLInputElement;
  const messageInput = document.getElementById("contact-message") as HTMLInputElement;

  emailInput.addEventListener("input", () => updateButtonDisabled());

  messageInput.addEventListener("input", (e) => {
    const count = (e.target as HTMLInputElement).value.length;
    countSpan.textContent = `${count} / (50 - 1500)`;
    updateButtonDisabled();
  });

  sendButton.addEventListener("click", async e => {
    e.preventDefault();
    if (isFormValid()) {
      await sendMessage();
    }
  });

  function updateButtonDisabled() {
    if (isFormValid()) {
      sendButton.removeAttribute("disabled");
    } else {
      sendButton.setAttribute("disabled", "true");
    }
  }

  function isFormValid() {
    const messageCount = messageInput.value.length;
    const mail = emailInput.value;
    return messageCount >= 50 && messageCount <= 1500 && mail.length > 4 && mail.includes("@") && mail.includes(".");
  }

  async function sendMessage() {
    const l = showLoading();
    try {
      const response = await fetch("https://host.michu-tech.com/backend/open/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          mail: emailInput.value,
          message: messageInput.value,
        }),
      });

      if (response.status === 200) {
        loadingToSuccess(l);
      } else {
        console.error(response);
        loadingToFailed(l);
      }
    } catch (e) {
      console.error(e);
      loadingToFailed(l);
    }
  }

  function showLoading() {
    sendButton.setAttribute("disabled", "true");

    return gsap.timeline({
      paused: false,
    }).to("#contact-form-loading", {
      opacity: 1,
      duration: 0.3,
      ease: "power1.out",
    }, 0)
      .to("#contact-form-text", {
        opacity: 0,
        duration: 0.3,
        ease: "power1.out",
      }, 0)
      .to("#contact-form-loading", {
        rotate: -360,
        duration: 0.75,
        ease: "linear",
        repeat: -1,
      }, "-=0.2");
  }

  function loadingToFailed(loadingAnimation: Animation) {
    const failedAnimation = gsap.timeline({
      paused: false,
      onComplete: () => sendButton.removeAttribute("disabled"),
      onStart: () => {
        loadingAnimation.pause();
      },
    }).to("#contact-form-loading", {
      opacity: 0,
      duration: 0.3,
      ease: "power1.out",
    }, 0)
      .to("#contact-form-failed", {
        opacity: 1,
        scale: 1,
        duration: 0.3,
        ease: "bounce",
      }, "-=0.1")
      .to("form button", {
        backgroundColor: "rgba(255, 0, 0, 1)",
        duration: 0.3,
        ease: "power1.out",
      }, "<")
      .to("#contact-form-failed", {
        opacity: 0,
        scale: 0.8,
        duration: 0.3,
        ease: "power1.in",
      }, "+=5")
      .to("form button", {
        backgroundColor: "white",
        duration: 0.3,
        ease: "power1.in",
      }, "<")
      .to("#contact-form-text", {
        opacity: 1,
        duration: 0.3,
        ease: "power1.in",
      }, "<");

    setTimeout(() => {
      failedAnimation.time(0).kill();
      loadingAnimation.time(0).kill();
    }, 6000);
  }

  function loadingToSuccess(loadingAnimation: Animation) {
    const successAnimation = gsap.timeline({
      paused: false,
      onComplete: () => {
        sendButton.removeAttribute("disabled");
      },
      onStart: () => {
        loadingAnimation.pause();
      },
    }).to("#contact-form-loading", {
      opacity: 0,
      duration: 0.3,
      ease: "power1.out",
    }, 0)
      .to("#contact-form-sent", {
        opacity: 1,
        scale: 1,
        duration: 0.3,
        ease: "bounce",
      }, "-=0.1")
      .to("form button", {
        backgroundColor: "rgba(229, 217, 199, 1)",
        duration: 0.3,
        ease: "power1.out",
      }, "<")
      .to("#contact-form-sent", {
        x: 50,
        scale: 0.8,
        duration: 0.5,
        ease: "power2.in",
      }, "+=1")
      .to("form button", {
        backgroundColor: "white",
        duration: 0.3,
        ease: "power1.in",
      }, "<")
      .to("#contact-form-text", {
        opacity: 1,
        duration: 0.3,
        ease: "power1.in",
      }, "<")
      .to("#contact-form-sent", {
        opacity: 0,
        scale: 0.8,
        duration: 0.2,
        ease: "power1.in",
      }, "-=0.2");

    setTimeout(() => {
      successAnimation.time(0).kill();
      loadingAnimation.time(0).kill();
    }, 2100);
  }
</script>